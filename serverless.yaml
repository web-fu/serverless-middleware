service: test
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  # The AWS region in which to deploy (us-east-1 is the default)
  region: eu-west-1
  runtime: nodejs18.x
  environment:
    # environment variables
    APP_ENV: ${env:APP_ENV}
    APP_DOMAIN: ${env:APP_DOMAIN}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}
    DB_NAME: ${env:DB_NAME}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
  ## Shared API Gateway Configuration
  apiGateway:
    restApiId: ${env:REST_API_ID} # REST API resource ID. Default is generated by the framework
    restApiRootResourceId: ${env:REST_API_ROOT_RESOURCE_ID} # REST API resource ID. Default is generated by the framework
  timeout: 28
  vpc:
    securityGroupIds:
      - ${env:SG1}
      - ${env:SG2}
    subnetIds:
      - ${env:SUBNET1}
      - ${env:SUBNET2}
      - ${env:SUBNET3}

functions:
  index:
    handler: src/index.handler
    events:
      - http:
          path: /${env:APP_DOMAIN}
          method: GET
          cors: true
          private: false
  log:
    middleware:
      pre:
        - logger.logMiddleware
    handler: src/log.handler
    events:
      - http:
          path: /${env:APP_DOMAIN}/log
          method: GET
          cors: true
          private: false

plugins:
  - serverless-offline
  - serverless-middleware
  - serverless-plugin-typescript
  - serverless-offline-local-authorizers-plugin
